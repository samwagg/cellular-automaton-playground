* Purpose
Identify the bottleneck that is causing slow frame rates for 100 X 100 grids. Is it the animation rendering or
the CA simulation?

* Findings
** CA simulation benchmark
*** Raw output
---------------------------
Benchmarking Game of Life CA with 10 X 10 grid, 100 updates.
Evaluation count : 1500 in 60 samples of 25 calls.
             Execution time mean : 40.697988 ms
    Execution time std-deviation : 719.141063 Âµs
   Execution time lower quantile : 39.928879 ms ( 2.5%)
   Execution time upper quantile : 41.802474 ms (97.5%)
                   Overhead used : 6.459185 ns

Found 2 outliers in 60 samples (3.3333 %)
	low-severe	 1 (1.6667 %)
	low-mild	 1 (1.6667 %)
 Variance from outliers : 6.2960 % Variance is slightly inflated by outliers
---------------------------
---------------------------
Benchmarking Game of Life CA with 50 X 50 grid, 100 updates.
Evaluation count : 60 in 60 samples of 1 calls.
             Execution time mean : 1.061175 sec
    Execution time std-deviation : 24.298947 ms
   Execution time lower quantile : 1.043904 sec ( 2.5%)
   Execution time upper quantile : 1.131052 sec (97.5%)
                   Overhead used : 6.459185 ns

Found 4 outliers in 60 samples (6.6667 %)
	low-severe	 1 (1.6667 %)
	low-mild	 3 (5.0000 %)
 Variance from outliers : 10.9906 % Variance is moderately inflated by outliers
---------------------------
---------------------------
Benchmarking Game of Life CA with 100 X 100 grid, 100 updates.
Evaluation count : 60 in 60 samples of 1 calls.
             Execution time mean : 4.256438 sec
    Execution time std-deviation : 30.105514 ms
   Execution time lower quantile : 4.188672 sec ( 2.5%)
   Execution time upper quantile : 4.308722 sec (97.5%)
                   Overhead used : 6.459185 ns

Found 2 outliers in 60 samples (3.3333 %)
	low-severe	 1 (1.6667 %)
	low-mild	 1 (1.6667 %)
 Variance from outliers : 1.6389 % Variance is slightly inflated by outliers
---------------------------
*** Summary
For a 100 X 100 grid, the simulation runs at ~25 FPS.

** Animation testing
To isolate the rendering from simulation, I forced realization of the seq of successive grids ahead
of time and fed that seq into the rendering code.
*** Results
Even with the collection of grids pre-generated, the animation only ran at around 2 FPS.

** Execute animation loop without actually drawing anything
I ran the draw loop without actually drawing anything but still iterating through the grid. For 100
X 100, FPS was ~15.

* Conclusion
The current performance bottleneck is the animation. Although the CA simulation could use
optimization as well, especially if we want to run it on an even larger grid.

Additionally, merely iterating through the grid maxed out at 15 FPS, suggesting that maybe I should
look for optimizations that eliminate the need to iterate through every cell at each frame.

* Disucssion
I imagine drawing each cell individually is causing the poor performance. Maybe I can group adjacent
cells with the same state together and draw them as one rectangle. I should also take a step back
and see if there is any documentation about how to address performance issues stemming from drawing
lots of small shapes. I can also consider using an alternative graphics library, if needed.

* Optimization attempts
** Create a shape group
*** Description
- Create the group...
(.createShape (q/current-graphics) PConstants/GROUP)

- Create each rectangle and add it to the group
(.createShape (q/current-graphics) PConstants/RECT (into-array Float/TYPE [(float x) (float y) (float cell-width) (float cell-height)]))
(.setFill shape (.color (q/current-graphics) (first color) (second color) (last color)))
(.setStrokeWeight shape 2)
(.addChild shape-group shape)

- Draw shape
(q/shape shape-group)
*** Findings
Creating a new shape by grouping rectangles is slightly faster than drawing each rectangle
separately. 5 FPS vs. 3.75 FPS for 100 X 100 grid.
** Only draw updates (when possible)
   This made a huge difference. The exact frame rate now varies depending on how many cells have
   changed per timestep. For a 100X100 grid with a randomized start, the frame rate is still very
   slow at about 3 frames/sec. But after things settle down the frame rate rises to about 15 fps,
   which my benchmarks showed to be the maximum possible frame rate when iterating through all 10000
   cells.
** Only check for updates in cells that are in the neighborhood of cells that were updated at the previous timestep.
   This results in a massive FPS improvement at larger grid sizes, especially when the number of
   updates per timestep is relatively low. For example, a 250X250 grid with a single glider ran at ~200 FPS.
